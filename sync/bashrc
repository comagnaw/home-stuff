export EDITOR=vim

source ~/.git-completion.bash

export GOPATH="$HOME/repos"
export PATH="/usr/local/bin:/usr/local/sbin:$PATH:~/home/bin:$GOPATH/bin"

function _update_ps1() {
    PS1="$(powerline-shell $?)"
}

if [ "$TERM" != "linux" ]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
fi

export LSCOLORS=GxBxHxDxFxHxHxHxHxCxCx

alias vi='vim'
alias ls="ls -G"
alias repo='cd ~/repos/src/github.com'
alias sublime='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'

function sclist() { screen -list; }
function sckill() { screen -X -S ${1} quit; }
function gitco() { git log | grep Date | awk '{print " : "$4" "$3" "$6}' | uniq -c; }

# Set up virtualenvwrapper
export WORKON_HOME=$HOME/.pyenvs
export PROJECT_HOME=$HOME/repos/pyprojects
source /usr/local/bin/virtualenvwrapper.sh


# In order for gpg to find gpg-agent, gpg-agent must be running, and there must be an env
# variable pointing GPG to the gpg-agent socket. This little script, which must be sourced
# in your shell's init script (ie, .bash_profile, .zshrc, whatever), will either start
# gpg-agent or set up the GPG_AGENT_INFO variable if it's already running.

# Add the following to your shell init to set up gpg-agent automatically for every shell
if [ -f ~/.gnupg/.gpg-agent-info ] && [ -n "$(pgrep gpg-agent)" ]; then
    source ~/.gnupg/.gpg-agent-info
    export GPG_AGENT_INFO
else
    eval $(gpg-agent --daemon ~/.gnupg/.gpg-agent-info)
fi
